// source: LeaderboardService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cloudstate_entity_key_pb = require('./cloudstate/entity_key_pb.js');
goog.object.extend(proto, cloudstate_entity_key_pb);
var cloudstate_eventing_pb = require('./cloudstate/eventing_pb.js');
goog.object.extend(proto, cloudstate_eventing_pb);
var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.realtime.leaderboard.AddPlayerRequest', null, global);
goog.exportSymbol('proto.realtime.leaderboard.CompleteEventRequest', null, global);
goog.exportSymbol('proto.realtime.leaderboard.GetLeaderboardRequest', null, global);
goog.exportSymbol('proto.realtime.leaderboard.GetLeaderboardSortedRequest', null, global);
goog.exportSymbol('proto.realtime.leaderboard.Leaderboard', null, global);
goog.exportSymbol('proto.realtime.leaderboard.LeaderboardCount', null, global);
goog.exportSymbol('proto.realtime.leaderboard.Player', null, global);
goog.exportSymbol('proto.realtime.leaderboard.UpdatePlayerRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realtime.leaderboard.CompleteEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realtime.leaderboard.CompleteEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.realtime.leaderboard.CompleteEventRequest.displayName = 'proto.realtime.leaderboard.CompleteEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realtime.leaderboard.AddPlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realtime.leaderboard.AddPlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.realtime.leaderboard.AddPlayerRequest.displayName = 'proto.realtime.leaderboard.AddPlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realtime.leaderboard.UpdatePlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realtime.leaderboard.UpdatePlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.realtime.leaderboard.UpdatePlayerRequest.displayName = 'proto.realtime.leaderboard.UpdatePlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realtime.leaderboard.GetLeaderboardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realtime.leaderboard.GetLeaderboardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.realtime.leaderboard.GetLeaderboardRequest.displayName = 'proto.realtime.leaderboard.GetLeaderboardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realtime.leaderboard.GetLeaderboardSortedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.realtime.leaderboard.GetLeaderboardSortedRequest.displayName = 'proto.realtime.leaderboard.GetLeaderboardSortedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realtime.leaderboard.LeaderboardCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realtime.leaderboard.LeaderboardCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.realtime.leaderboard.LeaderboardCount.displayName = 'proto.realtime.leaderboard.LeaderboardCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realtime.leaderboard.Leaderboard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.realtime.leaderboard.Leaderboard.repeatedFields_, null);
};
goog.inherits(proto.realtime.leaderboard.Leaderboard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.realtime.leaderboard.Leaderboard.displayName = 'proto.realtime.leaderboard.Leaderboard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realtime.leaderboard.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realtime.leaderboard.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.realtime.leaderboard.Player.displayName = 'proto.realtime.leaderboard.Player';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realtime.leaderboard.CompleteEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.realtime.leaderboard.CompleteEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realtime.leaderboard.CompleteEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.CompleteEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderboardid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realtime.leaderboard.CompleteEventRequest}
 */
proto.realtime.leaderboard.CompleteEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realtime.leaderboard.CompleteEventRequest;
  return proto.realtime.leaderboard.CompleteEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realtime.leaderboard.CompleteEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realtime.leaderboard.CompleteEventRequest}
 */
proto.realtime.leaderboard.CompleteEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaderboardid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realtime.leaderboard.CompleteEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realtime.leaderboard.CompleteEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realtime.leaderboard.CompleteEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.CompleteEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderboardid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string leaderboardId = 1;
 * @return {string}
 */
proto.realtime.leaderboard.CompleteEventRequest.prototype.getLeaderboardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.CompleteEventRequest} returns this
 */
proto.realtime.leaderboard.CompleteEventRequest.prototype.setLeaderboardid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.realtime.leaderboard.AddPlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realtime.leaderboard.AddPlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.AddPlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderboardid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    age: jspb.Message.getFieldWithDefault(msg, 4, 0),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realtime.leaderboard.AddPlayerRequest}
 */
proto.realtime.leaderboard.AddPlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realtime.leaderboard.AddPlayerRequest;
  return proto.realtime.leaderboard.AddPlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realtime.leaderboard.AddPlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realtime.leaderboard.AddPlayerRequest}
 */
proto.realtime.leaderboard.AddPlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaderboardid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realtime.leaderboard.AddPlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realtime.leaderboard.AddPlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.AddPlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderboardid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string leaderboardId = 1;
 * @return {string}
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.getLeaderboardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.AddPlayerRequest} returns this
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.setLeaderboardid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerId = 2;
 * @return {string}
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.AddPlayerRequest} returns this
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string playerName = 3;
 * @return {string}
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.AddPlayerRequest} returns this
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 age = 4;
 * @return {number}
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.realtime.leaderboard.AddPlayerRequest} returns this
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.setAge = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 score = 5;
 * @return {number}
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.realtime.leaderboard.AddPlayerRequest} returns this
 */
proto.realtime.leaderboard.AddPlayerRequest.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realtime.leaderboard.UpdatePlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.realtime.leaderboard.UpdatePlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realtime.leaderboard.UpdatePlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.UpdatePlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderboardid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    score: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realtime.leaderboard.UpdatePlayerRequest}
 */
proto.realtime.leaderboard.UpdatePlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realtime.leaderboard.UpdatePlayerRequest;
  return proto.realtime.leaderboard.UpdatePlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realtime.leaderboard.UpdatePlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realtime.leaderboard.UpdatePlayerRequest}
 */
proto.realtime.leaderboard.UpdatePlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaderboardid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realtime.leaderboard.UpdatePlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realtime.leaderboard.UpdatePlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realtime.leaderboard.UpdatePlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.UpdatePlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderboardid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string leaderboardId = 1;
 * @return {string}
 */
proto.realtime.leaderboard.UpdatePlayerRequest.prototype.getLeaderboardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.UpdatePlayerRequest} returns this
 */
proto.realtime.leaderboard.UpdatePlayerRequest.prototype.setLeaderboardid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerId = 2;
 * @return {string}
 */
proto.realtime.leaderboard.UpdatePlayerRequest.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.UpdatePlayerRequest} returns this
 */
proto.realtime.leaderboard.UpdatePlayerRequest.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 score = 3;
 * @return {number}
 */
proto.realtime.leaderboard.UpdatePlayerRequest.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.realtime.leaderboard.UpdatePlayerRequest} returns this
 */
proto.realtime.leaderboard.UpdatePlayerRequest.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realtime.leaderboard.GetLeaderboardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.realtime.leaderboard.GetLeaderboardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realtime.leaderboard.GetLeaderboardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.GetLeaderboardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderboardid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realtime.leaderboard.GetLeaderboardRequest}
 */
proto.realtime.leaderboard.GetLeaderboardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realtime.leaderboard.GetLeaderboardRequest;
  return proto.realtime.leaderboard.GetLeaderboardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realtime.leaderboard.GetLeaderboardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realtime.leaderboard.GetLeaderboardRequest}
 */
proto.realtime.leaderboard.GetLeaderboardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaderboardid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realtime.leaderboard.GetLeaderboardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realtime.leaderboard.GetLeaderboardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realtime.leaderboard.GetLeaderboardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.GetLeaderboardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderboardid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string leaderboardId = 1;
 * @return {string}
 */
proto.realtime.leaderboard.GetLeaderboardRequest.prototype.getLeaderboardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.GetLeaderboardRequest} returns this
 */
proto.realtime.leaderboard.GetLeaderboardRequest.prototype.setLeaderboardid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.realtime.leaderboard.GetLeaderboardSortedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realtime.leaderboard.GetLeaderboardSortedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderboardid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    order: jspb.Message.getFieldWithDefault(msg, 2, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realtime.leaderboard.GetLeaderboardSortedRequest}
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realtime.leaderboard.GetLeaderboardSortedRequest;
  return proto.realtime.leaderboard.GetLeaderboardSortedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realtime.leaderboard.GetLeaderboardSortedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realtime.leaderboard.GetLeaderboardSortedRequest}
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeaderboardid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrder(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realtime.leaderboard.GetLeaderboardSortedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realtime.leaderboard.GetLeaderboardSortedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderboardid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string leaderboardId = 1;
 * @return {string}
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.prototype.getLeaderboardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.GetLeaderboardSortedRequest} returns this
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.prototype.setLeaderboardid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string order = 2;
 * @return {string}
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.prototype.getOrder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.GetLeaderboardSortedRequest} returns this
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.prototype.setOrder = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.realtime.leaderboard.GetLeaderboardSortedRequest} returns this
 */
proto.realtime.leaderboard.GetLeaderboardSortedRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realtime.leaderboard.LeaderboardCount.prototype.toObject = function(opt_includeInstance) {
  return proto.realtime.leaderboard.LeaderboardCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realtime.leaderboard.LeaderboardCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.LeaderboardCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realtime.leaderboard.LeaderboardCount}
 */
proto.realtime.leaderboard.LeaderboardCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realtime.leaderboard.LeaderboardCount;
  return proto.realtime.leaderboard.LeaderboardCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realtime.leaderboard.LeaderboardCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realtime.leaderboard.LeaderboardCount}
 */
proto.realtime.leaderboard.LeaderboardCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realtime.leaderboard.LeaderboardCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realtime.leaderboard.LeaderboardCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realtime.leaderboard.LeaderboardCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.LeaderboardCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.realtime.leaderboard.LeaderboardCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.realtime.leaderboard.LeaderboardCount} returns this
 */
proto.realtime.leaderboard.LeaderboardCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.realtime.leaderboard.Leaderboard.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realtime.leaderboard.Leaderboard.prototype.toObject = function(opt_includeInstance) {
  return proto.realtime.leaderboard.Leaderboard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realtime.leaderboard.Leaderboard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.Leaderboard.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.realtime.leaderboard.Player.toObject, includeInstance),
    totalplayers: (f = msg.getTotalplayers()) && proto.realtime.leaderboard.LeaderboardCount.toObject(includeInstance, f),
    completedevent: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realtime.leaderboard.Leaderboard}
 */
proto.realtime.leaderboard.Leaderboard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realtime.leaderboard.Leaderboard;
  return proto.realtime.leaderboard.Leaderboard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realtime.leaderboard.Leaderboard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realtime.leaderboard.Leaderboard}
 */
proto.realtime.leaderboard.Leaderboard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.realtime.leaderboard.Player;
      reader.readMessage(value,proto.realtime.leaderboard.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 2:
      var value = new proto.realtime.leaderboard.LeaderboardCount;
      reader.readMessage(value,proto.realtime.leaderboard.LeaderboardCount.deserializeBinaryFromReader);
      msg.setTotalplayers(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompletedevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realtime.leaderboard.Leaderboard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realtime.leaderboard.Leaderboard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realtime.leaderboard.Leaderboard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.Leaderboard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.realtime.leaderboard.Player.serializeBinaryToWriter
    );
  }
  f = message.getTotalplayers();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.realtime.leaderboard.LeaderboardCount.serializeBinaryToWriter
    );
  }
  f = message.getCompletedevent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated Player players = 1;
 * @return {!Array<!proto.realtime.leaderboard.Player>}
 */
proto.realtime.leaderboard.Leaderboard.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.realtime.leaderboard.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.realtime.leaderboard.Player, 1));
};


/**
 * @param {!Array<!proto.realtime.leaderboard.Player>} value
 * @return {!proto.realtime.leaderboard.Leaderboard} returns this
*/
proto.realtime.leaderboard.Leaderboard.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.realtime.leaderboard.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.realtime.leaderboard.Player}
 */
proto.realtime.leaderboard.Leaderboard.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.realtime.leaderboard.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.realtime.leaderboard.Leaderboard} returns this
 */
proto.realtime.leaderboard.Leaderboard.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * optional LeaderboardCount totalPlayers = 2;
 * @return {?proto.realtime.leaderboard.LeaderboardCount}
 */
proto.realtime.leaderboard.Leaderboard.prototype.getTotalplayers = function() {
  return /** @type{?proto.realtime.leaderboard.LeaderboardCount} */ (
    jspb.Message.getWrapperField(this, proto.realtime.leaderboard.LeaderboardCount, 2));
};


/**
 * @param {?proto.realtime.leaderboard.LeaderboardCount|undefined} value
 * @return {!proto.realtime.leaderboard.Leaderboard} returns this
*/
proto.realtime.leaderboard.Leaderboard.prototype.setTotalplayers = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.realtime.leaderboard.Leaderboard} returns this
 */
proto.realtime.leaderboard.Leaderboard.prototype.clearTotalplayers = function() {
  return this.setTotalplayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.realtime.leaderboard.Leaderboard.prototype.hasTotalplayers = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool completedEvent = 3;
 * @return {boolean}
 */
proto.realtime.leaderboard.Leaderboard.prototype.getCompletedevent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.realtime.leaderboard.Leaderboard} returns this
 */
proto.realtime.leaderboard.Leaderboard.prototype.setCompletedevent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realtime.leaderboard.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.realtime.leaderboard.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realtime.leaderboard.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    age: jspb.Message.getFieldWithDefault(msg, 3, 0),
    score: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realtime.leaderboard.Player}
 */
proto.realtime.leaderboard.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realtime.leaderboard.Player;
  return proto.realtime.leaderboard.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realtime.leaderboard.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realtime.leaderboard.Player}
 */
proto.realtime.leaderboard.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realtime.leaderboard.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realtime.leaderboard.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realtime.leaderboard.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realtime.leaderboard.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string playerId = 1;
 * @return {string}
 */
proto.realtime.leaderboard.Player.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.Player} returns this
 */
proto.realtime.leaderboard.Player.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerName = 2;
 * @return {string}
 */
proto.realtime.leaderboard.Player.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.realtime.leaderboard.Player} returns this
 */
proto.realtime.leaderboard.Player.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 age = 3;
 * @return {number}
 */
proto.realtime.leaderboard.Player.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.realtime.leaderboard.Player} returns this
 */
proto.realtime.leaderboard.Player.prototype.setAge = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 score = 4;
 * @return {number}
 */
proto.realtime.leaderboard.Player.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.realtime.leaderboard.Player} returns this
 */
proto.realtime.leaderboard.Player.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.realtime.leaderboard);
